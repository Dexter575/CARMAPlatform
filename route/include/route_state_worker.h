#pragma once

/*
 * Copyright (C) 2020 LEIDOS.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

#include <stdexcept>

namespace route {

    class RouteStateWorker {

        public:

            /**
            * Possible events for the RouteStateWorker to respond to:
            * LOAD_ROUTE_FILES - Route worker received all necessary parameters and loaded route file path
            * ROUTE_SELECTED - A route file has been selected by user
            * ROUTING_SUCCESS - A route is generated by provided route file
            * ROUTE_COMPLETE - Reached the destination of current route
            * LEFT_ROUTE - Vehicle has deviated from the route
            * ROUTE_ABORT - User decides to stop following the current route
            * ROUTING_FAILURE - No route can be generated based on provided route file
            */
            enum RouteEvent {
                LOAD_ROUTE_FILES = 0,
                ROUTE_SELECTED = 1,
                ROUTING_SUCCESS = 2,
                ROUTE_COMPLETE = 3,
                LEFT_ROUTE = 4,
                ROUTE_ABORT = 5,
                ROUTING_FAILURE = 6,
            };

            /**
            * Possible states of the RouteStateWorker:
            * ROUTE_LOADING - RouteState worker's initial state, waiting for all necessary parameters to be set
            * ROUTE_SELECTION - RouteState worker is waiting on user to select a route
            * ROUTING - Calling lanelet2 library to generate a route based on selected route file
            * ROUTE_FOLLOWING - Following a route and tracking its downtrack and crosstrack distance
            */
            enum RouteState {
                ROUTE_LOADING = 0,
                ROUTE_SELECTION = 1,
                ROUTING = 2,
                ROUTE_FOLLOWING = 3,
            };

            RouteStateWorker();

            /**
             * \brief Process route event based on designed state machine diagram
             * \param event Incoming route event
             */
            void on_route_event(RouteEvent event);

            /**
             * \brief Get current route state machine state
             */
            RouteState get_route_state();

        private:

            // private local variable tracks the current route satte
            RouteState state_;

    };

}